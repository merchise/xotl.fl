from typing import AbstractSet, Generic, List, MutableMapping, Set, Tuple, TypeVar, Union

T = TypeVar("T")

class Graph(Generic[T]):
    nodes: MutableMapping[T, Set[T]]
    def add_node(self, node: T) -> None: ...
    def add_edge(self, from_: T, to_: T) -> None: ...
    def add_many(self, from_: T, to_: AbstractSet[T]) -> None: ...
    def get_topological_order(
        self, reverse: bool = ..., with_score: bool = ...
    ) -> List[Union[T, Tuple[int, T]]]: ...
    def get_sccs(self) -> List[AbstractSet[T]]: ...
