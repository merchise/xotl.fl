
# type_parsertab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
# type: ignore
# flake8: noqa
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'st_type_exprrightARROWleftKEYWORD_LETleftKEYWORD_INleftKEYWORD_WHEREleftTICK_OPERATORleftOPERATORleftPLUSMINUSleftSTARSLASHDOUBLESLASHPERCENTrightDOT_OPERATORleftSPACEANNOTATION ARROW BACKSLASH BASE10_INTEGER BASE16_INTEGER BASE2_INTEGER BASE8_INTEGER CHAR COLON DATE DATETIME DATETIME_INTERVAL DATE_INTERVAL DOT_OPERATOR DOUBLESLASH EQ FLOAT IDENTIFIER KEYWORD_CLASS KEYWORD_DATA KEYWORD_DEF KEYWORD_IN KEYWORD_INSTANCE KEYWORD_LET KEYWORD_WHERE LBRACKET LPAREN MINUS OPERATOR PADDING PERCENT PIPE PLUS RBRACKET RPAREN SLASH SPACE STAR STRING TICK_OPERATORexpr_factor : expr_factor SPACE expr_factor\n    expr_term9 : expr_factor infix_operator_9 expr_term9\n               | expr_factor\n\n    expr_term7 : expr_term7 infix_operator_7 expr_term9\n               | expr_term9\n\n    expr_term6 : expr_term6 infix_operator_6 expr_term7\n               | expr_term7\n\n    expr_term2 : expr_term2 infix_operator_2 expr_term6\n               | expr_term6\n\n    expr_term0 : expr infix_operator_0 expr_term0\n               | expr_term2\n\n    \n    st_expr : expr\n\n    expr : expr_term0\n\n    expr_factor : literal\n                | identifier\n                | enclosed_expr\n                | unit_value\n                | letexpr\n                | where_expr\n                | lambda_expr\n\n    st_type_expr : type_expr\n\n    literal : number\n             | concrete_number\n             | string\n             | char\n             | date\n             | datetime\n             | date_interval\n             | datetime_interval\n    date : DATE\n    datetime : DATETIME\n    date_interval : DATE_INTERVAL\n    datetime_interval : DATETIME_INTERVAL\n    unit_value : LPAREN RPAREN\n    char : CHARstring : STRINGidentifier : IDENTIFIERenclosed_expr : LPAREN expr RPARENexpr_factor : enclosed_expr expr_factor\n                   | expr_factor enclosed_expr\n    enclosed_expr : LPAREN DOT_OPERATOR RPAREN\n                     | LPAREN operator RPAREN\n    \n    infix_operator_9 : DOT_OPERATOR\n\n    infix_operator_7 : STAR\n                     | SLASH\n                     | DOUBLESLASH\n                     | PERCENT\n\n    infix_operator_6 : PLUS\n                     | MINUS\n\n    infix_operator_2 : OPERATOR\n                     | ARROW\n\n    infix_operator_0 : TICK_OPERATOR\n\n    operator : infix_operator_0\n             | infix_operator_2\n             | infix_operator_6\n             | infix_operator_7\n\n    number : BASE10_INTEGER\n              | BASE16_INTEGER\n              | BASE8_INTEGER\n              | BASE2_INTEGER\n    number : FLOATconcrete_number :  number ANNOTATION string\n                        | number ANNOTATION char\n                        | number ANNOTATION identifier\n    empty : lambda_expr : BACKSLASH parameters ARROW expr\n    parameters : IDENTIFIER _parameters\n    _parameters : SPACE IDENTIFIER _parameters_parameters : empty\n    pattern : parametersequation : pattern EQ expr\n    equations : equation _equation_set\n    \n    _equation_set : PADDING equation _equation_set\n    \n    _equation_set : empty\n    \n    letexpr : KEYWORD_LET SPACE equations KEYWORD_IN SPACE st_expr\n\n    \n    where_expr : expr KEYWORD_WHERE SPACE equations\n    where_expr : expr KEYWORD_WHERE PADDING equations\n    type_expr : type_function_expr\n                 | type_termtype_function_expr : type_term ARROW _maybe_padding type_function_expr\n                          | type_term\n    type_term : type_app_expression\n                 | type_factortype_app_expression : type_factor _app_args_non_empty_app_args : SPACE type_factor _app_args\n       _app_args_non_empty : SPACE type_factor _app_args\n    _app_args : emptytype_factor : IDENTIFIERtype_factor : LPAREN _maybe_padding type_expr _maybe_padding RPARENtype_factor : LBRACKET _maybe_padding type_expr _maybe_padding RBRACKET_maybe_padding : PADDING\n                      | empty\n    program : definitions\n    definitions : definition _definition_set\n    _definition_set : PADDING definition _definition_set\n    _definition_set : empty\n     definition : function_definition\n                   | datatype_definition\n    function_definition : functype_decl PADDING funcdef\n                           | funcdef\n    funcdef : KEYWORD_DEF equations\n    functype_decl : IDENTIFIER COLON COLON st_type_expr\n    datatype_definition : KEYWORD_DATA IDENTIFIER _cons_args EQ _data_body\n    _cons_args : IDENTIFIER _cons_args\n    _cons_args : empty\n    _data_body   : data_cons _data_conses\n       _data_conses : _maybe_padding PIPE data_cons _data_conses\n    _data_conses : emptydata_cons : IDENTIFIER _cons_args'
    
_lr_action_items = {'IDENTIFIER':([0,8,9,10,12,13,14,15,16,17,23,],[7,-65,-65,-65,7,7,-91,-92,7,7,7,]),'LPAREN':([0,8,9,10,12,13,14,15,16,17,23,],[8,-65,-65,-65,8,8,-91,-92,8,8,8,]),'LBRACKET':([0,8,9,10,12,13,14,15,16,17,23,],[9,-65,-65,-65,9,9,-91,-92,9,9,9,]),'$end':([1,2,3,4,5,6,7,11,18,21,22,24,25,28,29,30,31,],[0,-21,-78,-79,-82,-83,-88,-84,-65,-81,-80,-86,-87,-65,-89,-90,-85,]),'PADDING':([3,4,5,6,7,8,9,10,11,18,19,20,21,22,24,25,28,29,30,31,],[-78,-79,-82,-83,-88,14,14,14,-84,-65,14,14,-81,-80,-86,-87,-65,-89,-90,-85,]),'RPAREN':([3,4,5,6,7,11,14,15,18,19,21,22,24,25,26,28,29,30,31,],[-78,-79,-82,-83,-88,-84,-91,-92,-65,-65,-81,-80,-86,-87,29,-65,-89,-90,-85,]),'RBRACKET':([3,4,5,6,7,11,14,15,18,20,21,22,24,25,27,28,29,30,31,],[-78,-79,-82,-83,-88,-84,-91,-92,-65,-65,-81,-80,-86,-87,30,-65,-89,-90,-85,]),'ARROW':([4,5,6,7,11,18,21,24,25,28,29,30,31,],[10,-82,-83,-88,-84,-65,10,-86,-87,-65,-89,-90,-85,]),'SPACE':([6,7,18,28,29,30,],[12,-88,23,23,-89,-90,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'st_type_expr':([0,],[1,]),'type_expr':([0,13,16,],[2,19,20,]),'type_function_expr':([0,13,16,17,],[3,3,3,22,]),'type_term':([0,13,16,17,],[4,4,4,21,]),'type_app_expression':([0,13,16,17,],[5,5,5,5,]),'type_factor':([0,12,13,16,17,23,],[6,18,6,6,6,28,]),'_app_args_non_empty':([6,],[11,]),'_maybe_padding':([8,9,10,19,20,],[13,16,17,26,27,]),'empty':([8,9,10,18,19,20,28,],[15,15,15,25,15,15,25,]),'_app_args':([18,28,],[24,31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> st_type_expr","S'",1,None,None,None),
  ('expr_factor -> expr_factor SPACE expr_factor','expr_factor',3,'p_application','parsers.py',410),
  ('expr_term9 -> expr_factor infix_operator_9 expr_term9','expr_term9',3,'p_expressions_precedence_rules','parsers.py',417),
  ('expr_term9 -> expr_factor','expr_term9',1,'p_expressions_precedence_rules','parsers.py',418),
  ('expr_term7 -> expr_term7 infix_operator_7 expr_term9','expr_term7',3,'p_expressions_precedence_rules','parsers.py',420),
  ('expr_term7 -> expr_term9','expr_term7',1,'p_expressions_precedence_rules','parsers.py',421),
  ('expr_term6 -> expr_term6 infix_operator_6 expr_term7','expr_term6',3,'p_expressions_precedence_rules','parsers.py',423),
  ('expr_term6 -> expr_term7','expr_term6',1,'p_expressions_precedence_rules','parsers.py',424),
  ('expr_term2 -> expr_term2 infix_operator_2 expr_term6','expr_term2',3,'p_expressions_precedence_rules','parsers.py',426),
  ('expr_term2 -> expr_term6','expr_term2',1,'p_expressions_precedence_rules','parsers.py',427),
  ('expr_term0 -> expr infix_operator_0 expr_term0','expr_term0',3,'p_expressions_precedence_rules','parsers.py',429),
  ('expr_term0 -> expr_term2','expr_term0',1,'p_expressions_precedence_rules','parsers.py',430),
  ('st_expr -> expr','st_expr',1,'p_standalone_definitions','parsers.py',443),
  ('expr -> expr_term0','expr',1,'p_standalone_definitions','parsers.py',445),
  ('expr_factor -> literal','expr_factor',1,'p_standalone_definitions','parsers.py',447),
  ('expr_factor -> identifier','expr_factor',1,'p_standalone_definitions','parsers.py',448),
  ('expr_factor -> enclosed_expr','expr_factor',1,'p_standalone_definitions','parsers.py',449),
  ('expr_factor -> unit_value','expr_factor',1,'p_standalone_definitions','parsers.py',450),
  ('expr_factor -> letexpr','expr_factor',1,'p_standalone_definitions','parsers.py',451),
  ('expr_factor -> where_expr','expr_factor',1,'p_standalone_definitions','parsers.py',452),
  ('expr_factor -> lambda_expr','expr_factor',1,'p_standalone_definitions','parsers.py',453),
  ('st_type_expr -> type_expr','st_type_expr',1,'p_standalone_definitions','parsers.py',455),
  ('literal -> number','literal',1,'p_literals','parsers.py',463),
  ('literal -> concrete_number','literal',1,'p_literals','parsers.py',464),
  ('literal -> string','literal',1,'p_literals','parsers.py',465),
  ('literal -> char','literal',1,'p_literals','parsers.py',466),
  ('literal -> date','literal',1,'p_literals','parsers.py',467),
  ('literal -> datetime','literal',1,'p_literals','parsers.py',468),
  ('literal -> date_interval','literal',1,'p_literals','parsers.py',469),
  ('literal -> datetime_interval','literal',1,'p_literals','parsers.py',470),
  ('date -> DATE','date',1,'p_date','parsers.py',476),
  ('datetime -> DATETIME','datetime',1,'p_datetime','parsers.py',482),
  ('date_interval -> DATE_INTERVAL','date_interval',1,'p_date_interval','parsers.py',488),
  ('datetime_interval -> DATETIME_INTERVAL','datetime_interval',1,'p_datetime_interval','parsers.py',494),
  ('unit_value -> LPAREN RPAREN','unit_value',2,'p_unit_value','parsers.py',500),
  ('char -> CHAR','char',1,'p_char','parsers.py',506),
  ('string -> STRING','string',1,'p_string','parsers.py',511),
  ('identifier -> IDENTIFIER','identifier',1,'p_variable','parsers.py',516),
  ('enclosed_expr -> LPAREN expr RPAREN','enclosed_expr',3,'p_paren_expr','parsers.py',521),
  ('expr_factor -> enclosed_expr expr_factor','expr_factor',2,'p_application_after_paren','parsers.py',526),
  ('expr_factor -> expr_factor enclosed_expr','expr_factor',2,'p_application_after_paren','parsers.py',527),
  ('enclosed_expr -> LPAREN DOT_OPERATOR RPAREN','enclosed_expr',3,'p_operators_as_expressios','parsers.py',533),
  ('enclosed_expr -> LPAREN operator RPAREN','enclosed_expr',3,'p_operators_as_expressios','parsers.py',534),
  ('infix_operator_9 -> DOT_OPERATOR','infix_operator_9',1,'p_operator','parsers.py',544),
  ('infix_operator_7 -> STAR','infix_operator_7',1,'p_operator','parsers.py',546),
  ('infix_operator_7 -> SLASH','infix_operator_7',1,'p_operator','parsers.py',547),
  ('infix_operator_7 -> DOUBLESLASH','infix_operator_7',1,'p_operator','parsers.py',548),
  ('infix_operator_7 -> PERCENT','infix_operator_7',1,'p_operator','parsers.py',549),
  ('infix_operator_6 -> PLUS','infix_operator_6',1,'p_operator','parsers.py',551),
  ('infix_operator_6 -> MINUS','infix_operator_6',1,'p_operator','parsers.py',552),
  ('infix_operator_2 -> OPERATOR','infix_operator_2',1,'p_operator','parsers.py',554),
  ('infix_operator_2 -> ARROW','infix_operator_2',1,'p_operator','parsers.py',555),
  ('infix_operator_0 -> TICK_OPERATOR','infix_operator_0',1,'p_operator','parsers.py',557),
  ('operator -> infix_operator_0','operator',1,'p_operator','parsers.py',559),
  ('operator -> infix_operator_2','operator',1,'p_operator','parsers.py',560),
  ('operator -> infix_operator_6','operator',1,'p_operator','parsers.py',561),
  ('operator -> infix_operator_7','operator',1,'p_operator','parsers.py',562),
  ('number -> BASE10_INTEGER','number',1,'p_integer','parsers.py',569),
  ('number -> BASE16_INTEGER','number',1,'p_integer','parsers.py',570),
  ('number -> BASE8_INTEGER','number',1,'p_integer','parsers.py',571),
  ('number -> BASE2_INTEGER','number',1,'p_integer','parsers.py',572),
  ('number -> FLOAT','number',1,'p_float','parsers.py',601),
  ('concrete_number -> number ANNOTATION string','concrete_number',3,'p_concrete_number','parsers.py',606),
  ('concrete_number -> number ANNOTATION char','concrete_number',3,'p_concrete_number','parsers.py',607),
  ('concrete_number -> number ANNOTATION identifier','concrete_number',3,'p_concrete_number','parsers.py',608),
  ('empty -> <empty>','empty',0,'p_empty','parsers.py',617),
  ('lambda_expr -> BACKSLASH parameters ARROW expr','lambda_expr',4,'p_lambda_definition','parsers.py',622),
  ('parameters -> IDENTIFIER _parameters','parameters',2,'p_parameters','parsers.py',630),
  ('_parameters -> SPACE IDENTIFIER _parameters','_parameters',3,'p__params','parsers.py',638),
  ('_parameters -> empty','_parameters',1,'p_empty__parameters','parsers.py',645),
  ('pattern -> parameters','pattern',1,'p_pattern','parsers.py',694),
  ('equation -> pattern EQ expr','equation',3,'p_equation','parsers.py',709),
  ('equations -> equation _equation_set','equations',2,'p_equation_set','parsers.py',719),
  ('_equation_set -> PADDING equation _equation_set','_equation_set',3,'p_equation_set2','parsers.py',728),
  ('_equation_set -> empty','_equation_set',1,'p_equation_set3','parsers.py',737),
  ('letexpr -> KEYWORD_LET SPACE equations KEYWORD_IN SPACE st_expr','letexpr',6,'p_let_expr','parsers.py',747),
  ('where_expr -> expr KEYWORD_WHERE SPACE equations','where_expr',4,'p_where_expr','parsers.py',755),
  ('where_expr -> expr KEYWORD_WHERE PADDING equations','where_expr',4,'p_where_expr','parsers.py',756),
  ('type_expr -> type_function_expr','type_expr',1,'p_type_expr','parsers.py',766),
  ('type_expr -> type_term','type_expr',1,'p_type_expr','parsers.py',767),
  ('type_function_expr -> type_term ARROW _maybe_padding type_function_expr','type_function_expr',4,'p_type_function_expr','parsers.py',772),
  ('type_function_expr -> type_term','type_function_expr',1,'p_type_function_expr','parsers.py',773),
  ('type_term -> type_app_expression','type_term',1,'p_type_term','parsers.py',783),
  ('type_term -> type_factor','type_term',1,'p_type_term','parsers.py',784),
  ('type_app_expression -> type_factor _app_args_non_empty','type_app_expression',2,'p_type_application_expr','parsers.py',789),
  ('_app_args -> SPACE type_factor _app_args','_app_args',3,'p_type_application_args','parsers.py',801),
  ('_app_args_non_empty -> SPACE type_factor _app_args','_app_args_non_empty',3,'p_type_application_args','parsers.py',802),
  ('_app_args -> empty','_app_args',1,'p_type_application_args_empty','parsers.py',810),
  ('type_factor -> IDENTIFIER','type_factor',1,'p_type_identifier','parsers.py',815),
  ('type_factor -> LPAREN _maybe_padding type_expr _maybe_padding RPAREN','type_factor',5,'p_type_factor_paren','parsers.py',824),
  ('type_factor -> LBRACKET _maybe_padding type_expr _maybe_padding RBRACKET','type_factor',5,'p_type_factor_bracket','parsers.py',829),
  ('_maybe_padding -> PADDING','_maybe_padding',1,'p_maybe_padding','parsers.py',834),
  ('_maybe_padding -> empty','_maybe_padding',1,'p_maybe_padding','parsers.py',835),
  ('program -> definitions','program',1,'p_program','parsers.py',841),
  ('definitions -> definition _definition_set','definitions',2,'p_definitions','parsers.py',857),
  ('_definition_set -> PADDING definition _definition_set','_definition_set',3,'p_definition_set','parsers.py',865),
  ('_definition_set -> empty','_definition_set',1,'p_definition_set2','parsers.py',873),
  ('definition -> function_definition','definition',1,'p_definition','parsers.py',879),
  ('definition -> datatype_definition','definition',1,'p_definition','parsers.py',880),
  ('function_definition -> functype_decl PADDING funcdef','function_definition',3,'p_function_definition','parsers.py',886),
  ('function_definition -> funcdef','function_definition',1,'p_function_definition','parsers.py',887),
  ('funcdef -> KEYWORD_DEF equations','funcdef',2,'p_funcdef','parsers.py',898),
  ('functype_decl -> IDENTIFIER COLON COLON st_type_expr','functype_decl',4,'p_functype_decl','parsers.py',914),
  ('datatype_definition -> KEYWORD_DATA IDENTIFIER _cons_args EQ _data_body','datatype_definition',5,'p_datatype_definition','parsers.py',920),
  ('_cons_args -> IDENTIFIER _cons_args','_cons_args',2,'p_datatype_cons_args','parsers.py',930),
  ('_cons_args -> empty','_cons_args',1,'p_datatype_cons_args2','parsers.py',941),
  ('_data_body -> data_cons _data_conses','_data_body',2,'p_datatype_body','parsers.py',947),
  ('_data_conses -> _maybe_padding PIPE data_cons _data_conses','_data_conses',4,'p_datatype_body','parsers.py',948),
  ('_data_conses -> empty','_data_conses',1,'p_datatype_conses_empty','parsers.py',957),
  ('data_cons -> IDENTIFIER _cons_args','data_cons',2,'p_data_cons','parsers.py',968),
]
