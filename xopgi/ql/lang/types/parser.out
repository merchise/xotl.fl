Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> type_expr
Rule 1     type_expr -> TYPEVAR
Rule 2     type_expr -> CONS
Rule 3     type_expr -> type_expr SPACE type_expr
Rule 4     type_expr -> LPAREN type_expr RPAREN
Rule 5     type_expr -> LBRACKET type_expr RBRACKET
Rule 6     type_expr -> type_expr ARROW type_expr

Terminals, with rules where they appear

ARROW                : 6
CONS                 : 2
LBRACKET             : 5
LPAREN               : 4
RBRACKET             : 5
RPAREN               : 4
SPACE                : 3
TYPEVAR              : 1
error                : 

Nonterminals, with rules where they appear

type_expr            : 3 3 4 5 6 6 0

Parsing method: LALR

state 0

    (0) S' -> . type_expr
    (1) type_expr -> . TYPEVAR
    (2) type_expr -> . CONS
    (3) type_expr -> . type_expr SPACE type_expr
    (4) type_expr -> . LPAREN type_expr RPAREN
    (5) type_expr -> . LBRACKET type_expr RBRACKET
    (6) type_expr -> . type_expr ARROW type_expr

    TYPEVAR         shift and go to state 2
    CONS            shift and go to state 3
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 5

    type_expr                      shift and go to state 1

state 1

    (0) S' -> type_expr .
    (3) type_expr -> type_expr . SPACE type_expr
    (6) type_expr -> type_expr . ARROW type_expr

    SPACE           shift and go to state 6
    ARROW           shift and go to state 7


state 2

    (1) type_expr -> TYPEVAR .

    SPACE           reduce using rule 1 (type_expr -> TYPEVAR .)
    ARROW           reduce using rule 1 (type_expr -> TYPEVAR .)
    $end            reduce using rule 1 (type_expr -> TYPEVAR .)
    RPAREN          reduce using rule 1 (type_expr -> TYPEVAR .)
    RBRACKET        reduce using rule 1 (type_expr -> TYPEVAR .)


state 3

    (2) type_expr -> CONS .

    SPACE           reduce using rule 2 (type_expr -> CONS .)
    ARROW           reduce using rule 2 (type_expr -> CONS .)
    $end            reduce using rule 2 (type_expr -> CONS .)
    RPAREN          reduce using rule 2 (type_expr -> CONS .)
    RBRACKET        reduce using rule 2 (type_expr -> CONS .)


state 4

    (4) type_expr -> LPAREN . type_expr RPAREN
    (1) type_expr -> . TYPEVAR
    (2) type_expr -> . CONS
    (3) type_expr -> . type_expr SPACE type_expr
    (4) type_expr -> . LPAREN type_expr RPAREN
    (5) type_expr -> . LBRACKET type_expr RBRACKET
    (6) type_expr -> . type_expr ARROW type_expr

    TYPEVAR         shift and go to state 2
    CONS            shift and go to state 3
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 5

    type_expr                      shift and go to state 8

state 5

    (5) type_expr -> LBRACKET . type_expr RBRACKET
    (1) type_expr -> . TYPEVAR
    (2) type_expr -> . CONS
    (3) type_expr -> . type_expr SPACE type_expr
    (4) type_expr -> . LPAREN type_expr RPAREN
    (5) type_expr -> . LBRACKET type_expr RBRACKET
    (6) type_expr -> . type_expr ARROW type_expr

    TYPEVAR         shift and go to state 2
    CONS            shift and go to state 3
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 5

    type_expr                      shift and go to state 9

state 6

    (3) type_expr -> type_expr SPACE . type_expr
    (1) type_expr -> . TYPEVAR
    (2) type_expr -> . CONS
    (3) type_expr -> . type_expr SPACE type_expr
    (4) type_expr -> . LPAREN type_expr RPAREN
    (5) type_expr -> . LBRACKET type_expr RBRACKET
    (6) type_expr -> . type_expr ARROW type_expr

    TYPEVAR         shift and go to state 2
    CONS            shift and go to state 3
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 5

    type_expr                      shift and go to state 10

state 7

    (6) type_expr -> type_expr ARROW . type_expr
    (1) type_expr -> . TYPEVAR
    (2) type_expr -> . CONS
    (3) type_expr -> . type_expr SPACE type_expr
    (4) type_expr -> . LPAREN type_expr RPAREN
    (5) type_expr -> . LBRACKET type_expr RBRACKET
    (6) type_expr -> . type_expr ARROW type_expr

    TYPEVAR         shift and go to state 2
    CONS            shift and go to state 3
    LPAREN          shift and go to state 4
    LBRACKET        shift and go to state 5

    type_expr                      shift and go to state 11

state 8

    (4) type_expr -> LPAREN type_expr . RPAREN
    (3) type_expr -> type_expr . SPACE type_expr
    (6) type_expr -> type_expr . ARROW type_expr

    RPAREN          shift and go to state 12
    SPACE           shift and go to state 6
    ARROW           shift and go to state 7


state 9

    (5) type_expr -> LBRACKET type_expr . RBRACKET
    (3) type_expr -> type_expr . SPACE type_expr
    (6) type_expr -> type_expr . ARROW type_expr

    RBRACKET        shift and go to state 13
    SPACE           shift and go to state 6
    ARROW           shift and go to state 7


state 10

    (3) type_expr -> type_expr SPACE type_expr .
    (3) type_expr -> type_expr . SPACE type_expr
    (6) type_expr -> type_expr . ARROW type_expr

    SPACE           reduce using rule 3 (type_expr -> type_expr SPACE type_expr .)
    ARROW           reduce using rule 3 (type_expr -> type_expr SPACE type_expr .)
    $end            reduce using rule 3 (type_expr -> type_expr SPACE type_expr .)
    RPAREN          reduce using rule 3 (type_expr -> type_expr SPACE type_expr .)
    RBRACKET        reduce using rule 3 (type_expr -> type_expr SPACE type_expr .)

  ! SPACE           [ shift and go to state 6 ]
  ! ARROW           [ shift and go to state 7 ]


state 11

    (6) type_expr -> type_expr ARROW type_expr .
    (3) type_expr -> type_expr . SPACE type_expr
    (6) type_expr -> type_expr . ARROW type_expr

    $end            reduce using rule 6 (type_expr -> type_expr ARROW type_expr .)
    RPAREN          reduce using rule 6 (type_expr -> type_expr ARROW type_expr .)
    RBRACKET        reduce using rule 6 (type_expr -> type_expr ARROW type_expr .)
    SPACE           shift and go to state 6
    ARROW           shift and go to state 7

  ! SPACE           [ reduce using rule 6 (type_expr -> type_expr ARROW type_expr .) ]
  ! ARROW           [ reduce using rule 6 (type_expr -> type_expr ARROW type_expr .) ]


state 12

    (4) type_expr -> LPAREN type_expr RPAREN .

    SPACE           reduce using rule 4 (type_expr -> LPAREN type_expr RPAREN .)
    ARROW           reduce using rule 4 (type_expr -> LPAREN type_expr RPAREN .)
    $end            reduce using rule 4 (type_expr -> LPAREN type_expr RPAREN .)
    RPAREN          reduce using rule 4 (type_expr -> LPAREN type_expr RPAREN .)
    RBRACKET        reduce using rule 4 (type_expr -> LPAREN type_expr RPAREN .)


state 13

    (5) type_expr -> LBRACKET type_expr RBRACKET .

    SPACE           reduce using rule 5 (type_expr -> LBRACKET type_expr RBRACKET .)
    ARROW           reduce using rule 5 (type_expr -> LBRACKET type_expr RBRACKET .)
    $end            reduce using rule 5 (type_expr -> LBRACKET type_expr RBRACKET .)
    RPAREN          reduce using rule 5 (type_expr -> LBRACKET type_expr RBRACKET .)
    RBRACKET        reduce using rule 5 (type_expr -> LBRACKET type_expr RBRACKET .)

