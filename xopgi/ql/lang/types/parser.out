Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> type_expr
Rule 1     type_expr -> type_function_expr
Rule 2     type_expr -> type_term
Rule 3     type_function_expr -> type_term ARROW type_term
Rule 4     type_term -> type_app_expression
Rule 5     type_term -> type_factor
Rule 6     type_app_expression -> type_factor _app_args
Rule 7     _app_args -> SPACE type_factor _app_args
Rule 8     _app_args -> empty
Rule 9     empty -> <empty>
Rule 10    type_factor -> IDENTIFIER
Rule 11    type_factor -> LPAREN type_expr RPAREN
Rule 12    type_factor -> LBRACKET type_expr RBRACKET

Terminals, with rules where they appear

ARROW                : 3
IDENTIFIER           : 10
LBRACKET             : 12
LPAREN               : 11
RBRACKET             : 12
RPAREN               : 11
SPACE                : 7
error                : 

Nonterminals, with rules where they appear

_app_args            : 6 7
empty                : 8
type_app_expression  : 4
type_expr            : 11 12 0
type_factor          : 5 6 7
type_function_expr   : 1
type_term            : 2 3 3

Parsing method: LALR

state 0

    (0) S' -> . type_expr
    (1) type_expr -> . type_function_expr
    (2) type_expr -> . type_term
    (3) type_function_expr -> . type_term ARROW type_term
    (4) type_term -> . type_app_expression
    (5) type_term -> . type_factor
    (6) type_app_expression -> . type_factor _app_args
    (10) type_factor -> . IDENTIFIER
    (11) type_factor -> . LPAREN type_expr RPAREN
    (12) type_factor -> . LBRACKET type_expr RBRACKET

    IDENTIFIER      shift and go to state 6
    LPAREN          shift and go to state 7
    LBRACKET        shift and go to state 8

    type_expr                      shift and go to state 1
    type_function_expr             shift and go to state 2
    type_term                      shift and go to state 3
    type_app_expression            shift and go to state 4
    type_factor                    shift and go to state 5

state 1

    (0) S' -> type_expr .



state 2

    (1) type_expr -> type_function_expr .

    $end            reduce using rule 1 (type_expr -> type_function_expr .)
    RPAREN          reduce using rule 1 (type_expr -> type_function_expr .)
    RBRACKET        reduce using rule 1 (type_expr -> type_function_expr .)


state 3

    (2) type_expr -> type_term .
    (3) type_function_expr -> type_term . ARROW type_term

    $end            reduce using rule 2 (type_expr -> type_term .)
    RPAREN          reduce using rule 2 (type_expr -> type_term .)
    RBRACKET        reduce using rule 2 (type_expr -> type_term .)
    ARROW           shift and go to state 9


state 4

    (4) type_term -> type_app_expression .

    ARROW           reduce using rule 4 (type_term -> type_app_expression .)
    $end            reduce using rule 4 (type_term -> type_app_expression .)
    RPAREN          reduce using rule 4 (type_term -> type_app_expression .)
    RBRACKET        reduce using rule 4 (type_term -> type_app_expression .)


state 5

    (5) type_term -> type_factor .
    (6) type_app_expression -> type_factor . _app_args
    (7) _app_args -> . SPACE type_factor _app_args
    (8) _app_args -> . empty
    (9) empty -> .

  ! reduce/reduce conflict for ARROW resolved using rule 5 (type_term -> type_factor .)
  ! reduce/reduce conflict for $end resolved using rule 5 (type_term -> type_factor .)
  ! reduce/reduce conflict for RPAREN resolved using rule 5 (type_term -> type_factor .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 5 (type_term -> type_factor .)
    ARROW           reduce using rule 5 (type_term -> type_factor .)
    $end            reduce using rule 5 (type_term -> type_factor .)
    RPAREN          reduce using rule 5 (type_term -> type_factor .)
    RBRACKET        reduce using rule 5 (type_term -> type_factor .)
    SPACE           shift and go to state 11

  ! ARROW           [ reduce using rule 9 (empty -> .) ]
  ! $end            [ reduce using rule 9 (empty -> .) ]
  ! RPAREN          [ reduce using rule 9 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 9 (empty -> .) ]

    _app_args                      shift and go to state 10
    empty                          shift and go to state 12

state 6

    (10) type_factor -> IDENTIFIER .

    SPACE           reduce using rule 10 (type_factor -> IDENTIFIER .)
    ARROW           reduce using rule 10 (type_factor -> IDENTIFIER .)
    $end            reduce using rule 10 (type_factor -> IDENTIFIER .)
    RPAREN          reduce using rule 10 (type_factor -> IDENTIFIER .)
    RBRACKET        reduce using rule 10 (type_factor -> IDENTIFIER .)


state 7

    (11) type_factor -> LPAREN . type_expr RPAREN
    (1) type_expr -> . type_function_expr
    (2) type_expr -> . type_term
    (3) type_function_expr -> . type_term ARROW type_term
    (4) type_term -> . type_app_expression
    (5) type_term -> . type_factor
    (6) type_app_expression -> . type_factor _app_args
    (10) type_factor -> . IDENTIFIER
    (11) type_factor -> . LPAREN type_expr RPAREN
    (12) type_factor -> . LBRACKET type_expr RBRACKET

    IDENTIFIER      shift and go to state 6
    LPAREN          shift and go to state 7
    LBRACKET        shift and go to state 8

    type_expr                      shift and go to state 13
    type_function_expr             shift and go to state 2
    type_term                      shift and go to state 3
    type_app_expression            shift and go to state 4
    type_factor                    shift and go to state 5

state 8

    (12) type_factor -> LBRACKET . type_expr RBRACKET
    (1) type_expr -> . type_function_expr
    (2) type_expr -> . type_term
    (3) type_function_expr -> . type_term ARROW type_term
    (4) type_term -> . type_app_expression
    (5) type_term -> . type_factor
    (6) type_app_expression -> . type_factor _app_args
    (10) type_factor -> . IDENTIFIER
    (11) type_factor -> . LPAREN type_expr RPAREN
    (12) type_factor -> . LBRACKET type_expr RBRACKET

    IDENTIFIER      shift and go to state 6
    LPAREN          shift and go to state 7
    LBRACKET        shift and go to state 8

    type_expr                      shift and go to state 14
    type_function_expr             shift and go to state 2
    type_term                      shift and go to state 3
    type_app_expression            shift and go to state 4
    type_factor                    shift and go to state 5

state 9

    (3) type_function_expr -> type_term ARROW . type_term
    (4) type_term -> . type_app_expression
    (5) type_term -> . type_factor
    (6) type_app_expression -> . type_factor _app_args
    (10) type_factor -> . IDENTIFIER
    (11) type_factor -> . LPAREN type_expr RPAREN
    (12) type_factor -> . LBRACKET type_expr RBRACKET

    IDENTIFIER      shift and go to state 6
    LPAREN          shift and go to state 7
    LBRACKET        shift and go to state 8

    type_term                      shift and go to state 15
    type_app_expression            shift and go to state 4
    type_factor                    shift and go to state 5

state 10

    (6) type_app_expression -> type_factor _app_args .

    ARROW           reduce using rule 6 (type_app_expression -> type_factor _app_args .)
    $end            reduce using rule 6 (type_app_expression -> type_factor _app_args .)
    RPAREN          reduce using rule 6 (type_app_expression -> type_factor _app_args .)
    RBRACKET        reduce using rule 6 (type_app_expression -> type_factor _app_args .)


state 11

    (7) _app_args -> SPACE . type_factor _app_args
    (10) type_factor -> . IDENTIFIER
    (11) type_factor -> . LPAREN type_expr RPAREN
    (12) type_factor -> . LBRACKET type_expr RBRACKET

    IDENTIFIER      shift and go to state 6
    LPAREN          shift and go to state 7
    LBRACKET        shift and go to state 8

    type_factor                    shift and go to state 16

state 12

    (8) _app_args -> empty .

    ARROW           reduce using rule 8 (_app_args -> empty .)
    $end            reduce using rule 8 (_app_args -> empty .)
    RPAREN          reduce using rule 8 (_app_args -> empty .)
    RBRACKET        reduce using rule 8 (_app_args -> empty .)


state 13

    (11) type_factor -> LPAREN type_expr . RPAREN

    RPAREN          shift and go to state 17


state 14

    (12) type_factor -> LBRACKET type_expr . RBRACKET

    RBRACKET        shift and go to state 18


state 15

    (3) type_function_expr -> type_term ARROW type_term .

    $end            reduce using rule 3 (type_function_expr -> type_term ARROW type_term .)
    RPAREN          reduce using rule 3 (type_function_expr -> type_term ARROW type_term .)
    RBRACKET        reduce using rule 3 (type_function_expr -> type_term ARROW type_term .)


state 16

    (7) _app_args -> SPACE type_factor . _app_args
    (7) _app_args -> . SPACE type_factor _app_args
    (8) _app_args -> . empty
    (9) empty -> .

    SPACE           shift and go to state 11
    ARROW           reduce using rule 9 (empty -> .)
    $end            reduce using rule 9 (empty -> .)
    RPAREN          reduce using rule 9 (empty -> .)
    RBRACKET        reduce using rule 9 (empty -> .)

    _app_args                      shift and go to state 19
    empty                          shift and go to state 12

state 17

    (11) type_factor -> LPAREN type_expr RPAREN .

    SPACE           reduce using rule 11 (type_factor -> LPAREN type_expr RPAREN .)
    ARROW           reduce using rule 11 (type_factor -> LPAREN type_expr RPAREN .)
    $end            reduce using rule 11 (type_factor -> LPAREN type_expr RPAREN .)
    RPAREN          reduce using rule 11 (type_factor -> LPAREN type_expr RPAREN .)
    RBRACKET        reduce using rule 11 (type_factor -> LPAREN type_expr RPAREN .)


state 18

    (12) type_factor -> LBRACKET type_expr RBRACKET .

    SPACE           reduce using rule 12 (type_factor -> LBRACKET type_expr RBRACKET .)
    ARROW           reduce using rule 12 (type_factor -> LBRACKET type_expr RBRACKET .)
    $end            reduce using rule 12 (type_factor -> LBRACKET type_expr RBRACKET .)
    RPAREN          reduce using rule 12 (type_factor -> LBRACKET type_expr RBRACKET .)
    RBRACKET        reduce using rule 12 (type_factor -> LBRACKET type_expr RBRACKET .)


state 19

    (7) _app_args -> SPACE type_factor _app_args .

    ARROW           reduce using rule 7 (_app_args -> SPACE type_factor _app_args .)
    $end            reduce using rule 7 (_app_args -> SPACE type_factor _app_args .)
    RPAREN          reduce using rule 7 (_app_args -> SPACE type_factor _app_args .)
    RBRACKET        reduce using rule 7 (_app_args -> SPACE type_factor _app_args .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 5 resolved using rule (type_term -> type_factor)
WARNING: rejected rule (empty -> <empty>) in state 5
