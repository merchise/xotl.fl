--
-- Copyright (c) Merchise Autrement [~ยบ/~] and Contributors
-- All rights reserved.
--
-- This is free software; you can do what the LICENCE file allows you to.
--

($) :: (a -> b) -> a -> b
($) f a = f a

(.) :: (b -> c) -> (a -> b) -> a -> c
(.) f g x = f (g x)

id :: a -> a
id x = x

map :: (a -> b) -> [a] -> [b]
map f []   = []
map f x:xs = f x : map f xs

foldr :: (a -> b -> b) -> b -> [a] -> b
foldr f z []   = z
foldr f z x:xs = f z x : foldr f z xs

-- Implemented as a true builtin
(:) :: a -> [a] -> [a]


data Bool = True | False
            deriving (Eq, Ord)


-- The implementations of `and`, and `or` might skip the computation of the
-- second argument; this means that the second argument (if evalutated) may
-- fail to terminate, but the function may succeed.  The implementation of
-- `xor` must evaluate both arguments.

and :: Bool -> Bool -> Bool
and False _   = False
and True True = True
and _ _       = False

or :: Bool -> Bool -> Bool
or True _      = True
or False True  = True
or False False = False

xor :: Bool -> Bool -> Bool
xor True False = True
xor False True = True
xor _ _        = False

not :: Bool -> Bool
not True  = False
not False = True


(+) :: Number -> Number -> Number
(-) :: Number -> Number -> Number
(*) :: Number -> Number -> Number
(/) :: Number -> Number -> Number
(//) :: Number -> Number -> Number
(%) :: Number -> Number -> Number
(^) :: Number -> Number -> Number


class Eq a where
  -- minimal implementation requires one of '==' or '/='.
  (==) :: a -> a -> Bool
  (==) a b = not (a /= b)

  (/=) :: a -> a -> Bool
  (/=) a b = not (a == b)


instance Eq a => Eq [a] where
  (==) [] []         = True
  (==) x:xs (y:ys)   = x == y `and` xs == ys
  (==) _  _          = False


-- I cannot declare the each instance Eq of every possible tuple; they are Eq
-- a, Eq b => Eq (a, b); Eq a, Eq b, Eq c => Eq (a, b, c), etc.  The instances
-- are generated as demanded.


class Eq a => Ord a where
  -- minimal implementation requires any of '<', '>', '<=', or '>='.
  (<) :: a -> a -> Bool
  (<) a b = not (a >= b)

  (>) :: a -> a -> Bool
  (>) a b = not (a <= b)

  (<=) :: a -> a -> Bool
  (<=) a b = a < b `or` a == b

  (>=) :: a -> a -> Bool
  (>=) a b = a > b `or` a == b


-- I'm putting Left, Right and (,) not because they are necessarily
-- built-in; but to show that data constructors have the same type as
-- functions.
--
-- However, there's no way you can't actually write those functions in the
-- expression language, because you would not be able to *build* the
-- values.  This reveals the need for a data type language would allow the
-- classical:
--
--    data Either a b = Left a | Right b
--
-- and it would create the Left and Right functions.
--
-- The case of tuples do require some parsing extensions if we're to allow
-- triplets, 4-tuples, etc..
--
-- Notice however, we don't have any execution model in the language and no
-- real values beyond what literals allow.  I presume that we will use
-- Python values while executing; but that would have to revised in order
-- to make non-strict Python referentially transparent.


data Either a b = Left a | Right b
                  deriving (Eq, Ord)

-- From the definition it follows that:
--
-- Left :: a -> Either a b
-- Right :: b -> Either a b


-- I was not planning to do the deriving of instances; but the idea is quite
-- reasonable: For products types is quite "easy", Eq is:

_product_eq :: Eq a => [a] -> [a] -> Bool
_product_eq [] []     = True
_product_eq x:xs y:ys = x == y `and` _product_eq xs ys

-- and Ord is just:

_product_ord_lt :: Ord a => [a] -> [a] -> Bool
_product_ord_lt [] []     = True
_product_ord_lt x:xs y:ys = x < y `or` (x == y `and` _product_ord_lt xs ys)

-- NOTICE: Those implementations fail when given lists of different sizes.
-- But those implementations are expected to be *generated* for the right
-- product type, so they have equal amount of components.

either :: (a -> c) -> (b -> c) -> Either a b -> c
either f _ (Left a) = f a
either _ g (Right b) = g b

data Maybe a = Nothing | Just a
               deriving (Eq, Ord)

maybe :: b -> (a -> b) -> Maybe a -> b
maybe b _ Nothing  = b
maybe _ f (Just a) = f a

isJust :: Maybe a -> Bool
isJust (Just _) = True
isJust _        = False

isNothing :: Maybe a -> Bool
isNothing = isJust . not

fromMaybe :: a -> Maybe a -> a
fromMaybe a Nothing  = a
fromMaybe _ (Just a) = a


head :: [a] -> a
head x:_ = x

tail :: [a] -> [a]
tail _:xs = xs

single :: a -> [a]
single x = [x]

safe_head :: [a] -> Maybe a
safe_head []  = Nothing
safe_head x:_ = Just x

safe_tail :: [a] -> Maybe [a]
safe_tail []   = Nothing
safe_tail _:xs = Just xs


(++) :: [a] -> [a] -> [a]
(++) []   ys = ys
(++) x:xs ys = x:(xs ++ ys)

append :: a -> [a] -> [a]
append x ls = ls ++ [x]

length :: [a] -> Number
length = _length 0

-- Tail recursive implementation of length
_length :: Number -> [a] -> Number
_length r []   = r
_length r x:xs = _length (r + 1) xs


-- The count produces an infinite stream of numbers starting at `x`.
count :: Number -> [Number]
count x = x:count (x + 1)


data Then a = Then a
data Else a = Else a

-- I use the explicit 'forall a.' as a test of the parsing of type schemes.
if ::  forall a. Bool -> Then a -> Else a -> a
if True (Then a) _  = a
if False _ (Else a) = a

then :: forall a. a -> Then a
then = Then

else :: forall a. a -> Else a
else = Else


is_member :: Eq a => a -> [a] -> Bool
is_member x []   = False
is_member x y:xs = if x == y (then True) (else is_member x xs)

is_null :: [a] -> Bool
is_null []  = True
is_null _   = False


pair :: a -> b -> (a, b)
pair x y = (x, y)

fst :: (a, b) -> a
fst (x, _) = x

snd :: (a, b) -> b
snd (_, y) = y


data Date = Date Number Number Number
            deriving (Eq, Ord)

data Time = Time Number Number Number
            deriving (Eq, Ord)

data DateTime = DateTime Date Time
                deriving (Eq, Ord)

get_date :: DateTime -> Date
get_date (DateTime d _) = d

get_time :: DateTime -> Time
get_time (DateTime _ t) = t

date_to_datetime :: Date -> DateTime
date_to_datetime d = DateTime d (Time 0 0 0)


-- Local Variables:
-- mode: haskell
-- End:
